{"version":3,"sources":["images/logo.png","images/hero.png","components/Navbar/index.js","firebase.js","components/Header/index.js","components/Card/index.js","components/Input/index.js","components/Form/index.js","components/List/index.js","components/Body/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","src","Logo","alt","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","Header","props","state","attendees","collection","get","then","querySnapshot","data","docs","map","doc","console","log","setState","length","this","Hero","Component","Card","children","label","Input","placeholder","defaultValue","onChange","type","Form","addAttendee","formData","first_name","last_name","course","date_and_time","Date","Math","random","toString","substring","set","window","location","catch","error","message","handleChange","name","value","handleSubmit","e","preventDefault","target","onClick","List","orderBy","attendeesList","attendee","index","key","Body","App","style","padding","maxWidth","margin","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.03319290.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.f3f78282.png\";","module.exports = __webpack_public_path__ + \"static/media/hero.e9d04111.png\";","import React from \"react\";\nimport \"./styles.scss\";\n\nimport Logo from \"../../images/logo.png\";\n\nconst Navbar = () => (\n  <div className=\"Navbar\">\n    <div className=\"Navbar_container\">\n      <img src={Logo} alt=\"Logo\" className=\"Navbar_logo\" />\n    </div>\n  </div>\n);\n\nexport default Navbar;\n","import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCVp-dO-ODq8Ldy1Th20opm3AJhSpsdzeQ\",\n  authDomain: \"dsc-upc-attendance.firebaseapp.com\",\n  databaseURL: \"https://dsc-upc-attendance.firebaseio.com\",\n  projectId: \"dsc-upc-attendance\",\n  storageBucket: \"dsc-upc-attendance.appspot.com\",\n  messagingSenderId: \"607557176072\",\n  appId: \"1:607557176072:web:026a8b660eeaf0d528fabd\"\n};\n\nconst app = firebase.initializeApp(firebaseConfig);\nconst db = app.firestore();\n\nexport { db };\n","import React, { Component } from \"react\";\nimport \"./styles.scss\";\n\nimport Hero from \"../../images/hero.png\";\n\nimport { db } from \"../../firebase\";\n\nclass Header extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      attendees: 0\n    };\n  }\n\n  componentDidMount() {\n    db.collection(\"attendees\")\n      .get()\n      .then(querySnapshot => {\n        const data = querySnapshot.docs.map(doc => doc.data());\n        console.log(data);\n        this.setState({ attendees: data.length });\n      });\n  }\n\n  render() {\n    const { attendees } = this.state;\n\n    return (\n      <div className=\"Header\">\n        <div className=\"Header_textGroup\">\n          {attendees > 0 ? (\n            <>\n              <h1 className=\"Header_text\">{attendees}</h1>\n              <h1 className=\"Header_label\">\n                {attendees === 1 ? \"attendee\" : \"attendees\"}\n              </h1>\n            </>\n          ) : (\n            <div></div>\n          )}\n        </div>\n        <img className=\"Header_image\" src={Hero} alt=\"Hero\" />\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./styles.scss\";\n\nconst Card = ({ children, className, label }) => (\n  <div className={`Card ${className}`}>\n    <h3 className=\"Card_label\">{label}</h3>\n    {children}\n  </div>\n);\n\nexport default Card;\n","import React from \"react\";\nimport \"./styles.scss\";\n\nconst Input = ({ placeholder, className, defaultValue, onChange }) => (\n  <div className={`Input_container ${className}`}>\n    <input\n      type=\"text\"\n      placeholder={placeholder}\n      className=\"Input\"\n      defaultValue={defaultValue}\n      onChange={onChange}\n    />\n    <span className=\"Input_underline\"></span>\n  </div>\n);\n\nexport default Input;\n","import React, { Component } from \"react\";\nimport \"./styles.scss\";\n\nimport Card from \"../Card\";\nimport Input from \"../Input\";\n\nimport { db } from \"../../firebase\";\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formData: {\n        first_name: \"\",\n        last_name: \"\",\n        course: \"\",\n        date_and_time: null\n      }\n    };\n  }\n\n  addAttendee = () => {\n    const { formData } = this.state;\n    const { first_name, last_name, course } = formData;\n\n    if (first_name !== \"\" && last_name !== \"\" && course !== \"\") {\n      const data = {\n        ...formData,\n        date_and_time: new Date()\n      };\n\n      db.collection(\"attendees\")\n        .doc(\n          Math.random()\n            .toString(36)\n            .substring(6)\n        )\n        .set(data)\n        .then(() => {\n          window.location = \"/\";\n        })\n        .catch(error => console.log(error.message, \"Create user failed\"));\n    }\n  };\n\n  handleChange = (name, value) => {\n    const { formData } = this.state;\n\n    this.setState({\n      formData: {\n        ...formData,\n        [name]: value\n      }\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.addAttendee();\n  };\n\n  render() {\n    const { formData } = this.state;\n    const { first_name, last_name, course } = formData;\n\n    return (\n      <Card className=\"Form_card\" label=\"Form\">\n        <form>\n          <div className=\"Form_inputGroup\">\n            <Input\n              className=\"Form_input\"\n              placeholder=\"First Name\"\n              onChange={e => this.handleChange(\"first_name\", e.target.value)}\n              defaultValue={first_name}\n            />\n            <Input\n              className=\"Form_input\"\n              placeholder=\"Last Name\"\n              onChange={e => this.handleChange(\"last_name\", e.target.value)}\n              defaultValue={last_name}\n            />\n          </div>\n          <Input\n            className=\"Form_input\"\n            placeholder=\"Course (e.g. BS Computer Science)\"\n            onChange={e => this.handleChange(\"course\", e.target.value)}\n            defaultValue={course}\n          />\n          <button className=\"Form_button\" onClick={this.handleSubmit}>\n            Submit\n          </button>\n        </form>\n      </Card>\n    );\n  }\n}\n\nexport default Form;\n","import React, { Component } from \"react\";\nimport \"./styles.scss\";\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\nimport \"../../scss/perfect-scrollbar.scss\";\n\nimport Card from \"../Card\";\n\nimport { db } from \"../../firebase\";\n\nclass List extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      attendees: null\n    };\n  }\n\n  componentDidMount() {\n    db.collection(\"attendees\")\n      .orderBy(\"date_and_time\", \"desc\")\n      .get()\n      .then(querySnapshot => {\n        const data = querySnapshot.docs.map(doc => doc.data());\n        console.log(data);\n        this.setState({ attendees: data });\n      });\n  }\n\n  render() {\n    const { attendees } = this.state;\n\n    const attendeesList =\n      attendees && attendees.length > 0\n        ? attendees.map((attendee, index) => (\n            <div className=\"List_item\" key={index}>\n              <p className=\"List_item_text\">{`${attendee.first_name} ${attendee.last_name}`}</p>\n            </div>\n          ))\n        : null;\n\n    return (\n      <Card className=\"List_card\" label=\"List\">\n        <PerfectScrollbar className=\"List\">{attendeesList}</PerfectScrollbar>\n      </Card>\n    );\n  }\n}\n\nexport default List;\n","import React from \"react\";\nimport \"./styles.scss\";\n\nimport Form from \"../Form\";\nimport List from \"../List\";\n\nconst Body = () => (\n  <div className=\"Body\">\n    <Form />\n    <List />\n  </div>\n);\n\nexport default Body;\n","import React, { Component } from \"react\";\n\nimport Navbar from \"./components/Navbar\";\nimport Header from \"./components/Header\";\nimport Body from \"./components/Body\";\n\nclass App extends Component {\n  render() {\n    // console.log(this.props);\n    return (\n      <div className=\"App\">\n        <Navbar />\n        <section\n          style={{\n            padding: \"80px\",\n            maxWidth: \"1000px\",\n            margin: \"0 auto\"\n          }}\n        >\n          <Header />\n          <Body />\n        </section>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}